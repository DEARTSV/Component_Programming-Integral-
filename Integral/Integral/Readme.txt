My_objects - картинка интеграла
Form1.cs - код формы
Program.cs - код клиента

Parser - проект для генерации парсера.
------------------------------------------------------------------------------------------------
- Оператор между операндами (x+y) - инфиксная запись.
- Оператор после операндов (xy+) - постфиксная (обратная польская) запись.
Преимущества обратной польской записи:
* Любая формула может быть выражена без скобок. 
* Удобна для вычисления формул в машинах со стеками.
     ПРИМЕР использования стека: (1+2)*4+3 запишется так: 1 2 + 4 × 3 +
     Читать это следует так:
	  операция	действие		вид стека
	1) 1		поместить в стек 	1
	2) 2		поместить в стек	1, 2
	3) +		сложение стека		3
	4) 4		поместить в стек	3, 4
	5) *		умножение стека		12
	6) 3		поместить в стек	12, 3
	7) +		сложение стека		15
     Замечание: в данном случае число так же является операцией
* Инфиксные операторы имеют приоритеты, которые произвольны и нежелательны.


Парсер осуществлён при помощи алгоритма преобразования выражения в обратную польскую запись.
Рассматриваем поочередно каждый символ:
  1) Если этот символ — число (или переменная), то помещаем его в список операций.
  2) Если символ — знак операции (+, -, *, /, ^, подфункции(sin, neg, exp и проч.)), то проверяем приоритет данной операции.
    * Подфункции имеют наивысший приоритет (5)
    * Возведение в степень: (4)
    * Операции умножения и деления: (3)
    * Операции сложения и вычитания: (2)
    * Наименьший приоритет (1) имеют скобки
    Получив один из этих символов, мы должны проверить стек:
      a) если стек все ещё пуст или находящиеся в нем символы (а находиться в нем могут только знаки операций
          и открывающая скобка) имеют меньший приоритет, чем приоритет текущего символа, то помещаем текущий символ в стек.
      b) если символ, находящийся на вершине стека имеет приоритет, больший или равный приоритету текущего символа,
          то извлекаем символы из стека в список операций до тех пор, пока выполняется это условие.
          Затем переходим к пункту а).
  3) Если текущий символ — открывающая скобка, то помещаем ее в стек.
  4) Если текущий символ — закрывающая скобка, то извлекаем символы из стека в список операций до тех пор,
      пока не встретим в стеке открывающую скобку (т.е. символ с приоритетом, равным 1),
      которую следует просто уничтожить. Закрывающая скобка просто-напросто не помещается в стек.
  5) Если вся входная строка разобрана, а в стеке ещё остаются знаки операций, извлекаем их из стека в список операций.